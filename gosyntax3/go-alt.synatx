context default
# keywords
	keyword whole break brightblue
	keyword whole case brightblue
	keyword whole chan brightred
	keyword whole const brightblue
	keyword whole continue brightblue
	keyword whole default brightblue
	keyword whole defer brightblue
	keyword whole else brightblue
	keyword whole fallthrough brightblue
	keyword whole for brightblue
	keyword whole func  brightblue
	keyword whole go brightblue
	keyword whole goto brightblue
	keyword whole if brightblue
	keyword whole import  magenta
	keyword whole interface brightblue
	keyword whole map brightblue
	keyword whole package magenta
	keyword whole range brightblue
	keyword whole return brightblue
	keyword whole select brightblue
	keyword whole struct brightblue
	keyword whole switch brightblue
	keyword whole type brightblue
	keyword whole var brightblue
# builtin types
	keyword whole uint8 cyan
	keyword whole uint16 cyan
	keyword whole uint32 cyan
	keyword whole uint64 cyan
	keyword whole int8 cyan
	keyword whole int16 cyan
	keyword whole int32 cyan
	keyword whole int64 cyan
	keyword whole float32 cyan
	keyword whole float64 cyan
	keyword whole byte cyan
	keyword whole uint cyan
	keyword whole int cyan
	keyword whole float cyan
	keyword whole uintptr cyan
	keyword whole string cyan
	keyword whole bool cyan
	keyword whole error cyan
# builtin functions
	keyword whole nil magenta
	keyword whole true magenta
	keyword whole false magenta
	keyword whole iota magenta
	keyword whole cap brightblue
	keyword whole close brightblue
	keyword whole closed brightblue
	keyword whole len brightblue
	keyword whole make brightblue
	keyword whole new brightblue
	keyword whole panic brightblue
	keyword whole panicln brightblue
	keyword whole print brightblue
	keyword whole println brightblue
# special functions
	keyword whole init brightred
	keyword whole main brightred
# comment chars
	keyword /\* brightblue
	keyword \*/ brightblue
	keyword // brightblue
# punctuation, operator chars
	keyword <- brightred
	keyword -> magenta
	keyword \+  magenta
	keyword &  magenta
	keyword (  magenta
	keyword ) magenta
	keyword - magenta
	keyword | magenta
	keyword < magenta
	keyword [ magenta
	keyword ] magenta
	keyword \* magenta
	keyword ^ magenta
	keyword > magenta
	keyword { magenta
	keyword } magenta
	keyword / magenta
	keyword = black
	keyword , black
	keyword ; magenta
	keyword % magenta
	keyword ! magenta
	keyword . magenta
	keyword : magenta

# comment
context exclusive /\* \*/ gray
context exclusive // \n gray

# char, raw string, string
context ' ' brown
	keyword \\\{abfnrtv\\'"\} green
	keyword \\\{0123\}\{01234567\}\{01234567\} green
	keyword \\x\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\} green
	keyword \\u\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\} green
	keyword \\U\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\} green
context ` ` brown
context " " brown
	keyword \\\{abfnrtv\\'"\} green
	keyword \\\{0123\}\{01234567\}\{01234567\} green
	keyword \\x\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\} green
	keyword \\u\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\} green
	keyword \\U\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\}\{0123456789abcdefABCDEF\} green
